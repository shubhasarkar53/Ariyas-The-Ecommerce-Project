
  // const handleSubmitContactForm = async (e) => {
  //   e.preventDefault();

  //   // Set loading to true when the form is submitted
  //   setLoading(true);

  //   try {
  //     // Dispatch the submitContactForm action
  //     const result = await dispatch(submitContactForm({
  //       firstName,
  //       lastName,
  //       phone,
  //       email,
  //       message,
  //     }));

  //     if (result.error) {
  //       // Handle error, show toast or perform other actions
  //       toast.error(`Error: ${result.error.message}`);
  //     } else {
  //       // Introduce a delay of 2 seconds before setting loading to false
  //       setTimeout(() => {
  //         // Show the success message and set loading to false
  //         toast.success('Message sent successfully!');
  //         setLoading(false);
  //       }, 2000);
  //     }
  //   } catch (error) {
  //     // Handle error, show toast or perform other actions
  //     toast.error(`Error: ${error.message}`);
  //     // Set loading to false if there's an error
  //     setLoading(false);
  //   }
  // };





import React, { Fragment, useState, useEffect } from "react";
import PropTypes from "prop-types";
import "./MyOrders.scss";
import Loader from "../Loader/Loader";
import { myOrders } from "../../Redux/Actions/orderAction";
import { useDispatch, useSelector } from "react-redux";

const MyOrders = ({ history }) => {
  const dispatch = useDispatch();

  const { user } = useSelector((state) => state.user);
  const { loading, error, orders } = useSelector((state) => state.myOrders);

  const [returnWindowOpen, setReturnWindowOpen] = useState(true);

  const calculateDeliveryDate = (orderDate, status) => {
    if (status === "delivered") {
      return new Date(orderDate).toDateString();
    } else {
      const deliveryDate = new Date(orderDate);
      deliveryDate.setDate(deliveryDate.getDate() + 7);
      return deliveryDate.toDateString();
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case "processing":
        return "red";
      case "shipped":
        return "blue";
      case "delivered":
        return "green";
      default:
        return "black"; // Default color
    }
  };

  useEffect(() => {
    dispatch(myOrders());
  }, [dispatch, history]);

  useEffect(() => {
    const interval = setInterval(() => {
      // Calculate if return window is closed after 7 days of delivery
      orders.forEach(order => {
        if (order.orderStatus === "delivered") {
          const deliveryDate = new Date(order.createdAt);
          deliveryDate.setDate(deliveryDate.getDate() + 7);
          const currentDate = new Date();
          if (currentDate > deliveryDate) {
            setReturnWindowOpen(false);
          }
        }
      });
    }, 1000 * 60 * 60 * 24); // Check every day
    return () => clearInterval(interval);
  }, [orders]);

  const isReturnEnabled = (status) => status === "delivered" && returnWindowOpen;
  const isCancelVisible = (status) => status !== "delivered";

  return (
    <Fragment>
      {loading ? (
        <Loader />
      ) : (
        <Fragment>
          <div className="orders-container">
            <h1 className="myOrdersHeading">{user.name}&apos;s Orders</h1>
            <div className="myOrdersContainer">
              {orders &&
                orders.reverse().map((order) => (
                  <div className="myOrderItems" key={order._id}>
                    <div className="leftDiv">
                      <h3>Order Date: {order.createdAt.substring(0, 10)}</h3>
                      <h3>Order Items: {order.orderItems.length}</h3>
                      <h3>Amount: ${order.totalPrice}</h3>
                      <h3>
                        Order Status:{" "}
                        <span style={{ color: getStatusColor(order.orderStatus) }}>
                          {order.orderStatus}
                        </span>
                      </h3>
                      <h3>
                        Delivery Date:{" "}
                        {calculateDeliveryDate(order.createdAt, order.orderStatus)}
                        {order.orderStatus !== "delivered" && "(approx)"}
                      </h3>
                      <div className="btnSec">
                        <button className="btN" onClick={() => history.push(`/order/${order._id}`)}>
                          View Order
                        </button>
                        {isCancelVisible(order.orderStatus) && (
                          <button className="btN">Cancel Order</button>
                        )}
                        {isReturnEnabled(order.orderStatus) && (
                          <button className="btN">Return Order</button>
                        )}
                        {!returnWindowOpen && (
                          <span style={{ color: "red", marginLeft: "10px" }}>
                            Return window closed after 7 days
                          </span>
                        )}
                      </div>
                    </div>
                    <div className="rightDiv">
                      <h3>Order Id: <span className="orderID">{order._id}</span></h3>
                      <h3>Payment Method: Cash On Delivery</h3>
                      <h3>
                        Payment Status:{" "}
                        {order.isPaid ? order.paidAt.substring(0, 10) : "Not Paid"}
                      </h3>
                    </div>
                  </div>
                ))}
            </div>
          </div>
        </Fragment>
      )}
    </Fragment>
  );
};

MyOrders.propTypes = {
  history: PropTypes.object.isRequired,
};

export default MyOrders;


    <div className="products-main-container">
            <div className="products-container">
                {products.length > 0 ? (
                  products.map((product) => (
                    <ProductCard key={product._id} product={product} />
                  ))
                ) : (
                  <div className="not-found-container">
                    <img src={NotFound} alt="Not Found" />
                  </div>
                )}
            </div>
      </div>


//15
<Fragment>
      <div className="main_container">
        <h1>Find Local Treasures Products From Location</h1>
        <div className="sub-container">
          <div className="sub-top">
            <form className="search-form" onSubmit={searchSubmithandler}>
              <input
                value={keyword}
                className="search-input"
                type="text"
                id="search"
                placeholder="Find Products From the Places You Want"
                onChange={(e) => setKeyword(e.target.value)}
              />
              <input className="search-button" type="submit" value="Search" />
            </form>
            <div className="loc">
              <FaLocationCrosshairs  className="loc-img"/>
              <p className="loc_text">Fetch Your Current Location</p>
            </div>
          </div>
          <div className="sub-down">
            <Dropdown
              options={options}
              onChange={handleDropdownChange}
              value={selectedOption}
              placeholder="West Bengal"
              className="custom-dropdown"
              controlClassName="custom-dropdown-control"
              menuClassName="custom-dropdown-menu"
              arrowClassName="custom-dropdown-arrow"
            />
            {selectedOption && <p>You selected: {selectedOption.value}</p>}
          </div>
        </div>
      </div>
    </Fragment>